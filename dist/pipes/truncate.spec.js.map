{"version":3,"file":"truncate.spec.js","sourceRoot":"","sources":["../home/cristian/proyectos/angular2/ng2-truncate/tmp/broccoli_type_script_compiler-input_base_path-fRjOZIwa.tmp/0/src/pipes/truncate.spec.ts"],"names":[],"mappings":";AAAA,yBAAgC,YAAY,CAAC,CAAA;AAE7C,wBAKO,uBAAuB,CAAC,CAAA;AAE/B,kBAAQ,CAAC,iBAAiB,EAAE;IAE1B,IAAI,IAAqB,CAAC;IAE1B,oBAAU,CAAC;QACT,IAAI,GAAG,IAAI,0BAAe,EAAE,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,YAAE,CAAC,oCAAoC,EAAE;QACvC,gBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,YAAE,CAAC,oCAAoC,EAAE;QACvC,gBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACnE,CAAC,CAAC,CAAC;IAEH,YAAE,CAAC,oCAAoC,EAAE;QACvC,gBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,YAAE,CAAC,wBAAwB,EAAE;QAC3B,gBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,YAAE,CAAC,uBAAuB,EAAE;QAC1B,gBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,YAAE,CAAC,+BAA+B,EAAE;QAClC,gBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { ng2TruncatePipe } from './truncate';\n\nimport {\n  beforeEach,\n  describe,\n  expect,\n  it\n} from '@angular/core/testing';\n\ndescribe('ng2TruncatePipe', () => {\n\n  let pipe: ng2TruncatePipe;\n\n  beforeEach(() => {\n    pipe = new ng2TruncatePipe();\n  });\n\n  it('transforms \"123456789\" to \"123...\"', () => {\n    expect(pipe.transform('123456789', 4)).toEqual('1234...');\n  });\n\n  it('transforms \"123456789\" to \"123xxx\"', () => {\n    expect(pipe.transform('123456789', 4, 'xxx')).toEqual('1234xxx');\n  });\n\n  it('transforms \"1234 5678\" to \"123...\"', () => {\n    expect(pipe.transform('1234 5678', 3)).toEqual('123...');\n  });\n\n  it('leaves \"123\" unchanged', () => {\n    expect(pipe.transform('123', 3)).toEqual('123');\n  });\n\n  it('leaves \"12\" unchanged', () => {\n    expect(pipe.transform('12', 3)).toEqual('12');\n  });\n\n  it('leaves empty string unchanged', () => {\n    expect(pipe.transform('', 3)).toEqual('');\n  });\n});\n"]}